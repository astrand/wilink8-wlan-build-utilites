From 75a71c799e5deafc354309bb7b5276f639f0c231 Mon Sep 17 00:00:00 2001
From: Eliad Peller <eliad@wizery.com>
Date: Wed, 24 Jun 2015 14:39:33 +0300
Subject: [PATCH 05/47] P2P: dont consider p2p_ignore_shared_freq in case of
 running ap [INTERNAL, AP P2P]

In our case we want to sync to existing frequency in case of
running ap (e.g. AP + GO), but don't sync in case of connected
station (STA + GO).

Remember whether the sync frequency came from a running ap,
and handle p2p_ignore_shared_freq appropriately.

Signed-off-by: Eliad Peller <eliad@wizery.com>
---
 wpa_supplicant/p2p_supplicant.c | 36 +++++++++++++++++++++++-------------
 1 file changed, 23 insertions(+), 13 deletions(-)

diff --git a/wpa_supplicant/p2p_supplicant.c b/wpa_supplicant/p2p_supplicant.c
index c723670..512087f 100755
--- a/wpa_supplicant/p2p_supplicant.c
+++ b/wpa_supplicant/p2p_supplicant.c
@@ -127,7 +127,8 @@ static int wpas_p2p_join_start(struct wpa_supplicant *wpa_s, int freq,
 static int wpas_p2p_setup_freqs(struct wpa_supplicant *wpa_s, int freq,
 				int *force_freq, int *pref_freq, int go,
 				unsigned int *pref_freq_list,
-				unsigned int *num_pref_freq);
+				unsigned int *num_pref_freq, 
+				int *running_ap);
 static void wpas_p2p_join_scan_req(struct wpa_supplicant *wpa_s, int freq,
 				   const u8 *ssid, size_t ssid_len);
 static void wpas_p2p_join_scan(void *eloop_ctx, void *timeout_ctx);
@@ -223,7 +224,8 @@ wpas_p2p_valid_oper_freqs(struct wpa_supplicant *wpa_s,
 
 
 static void wpas_p2p_set_own_freq_preference(struct wpa_supplicant *wpa_s,
-					     int freq)
+					     int freq,
+					     int running_ap)
 {
 	if (wpa_s->global->p2p_disabled || wpa_s->global->p2p == NULL)
 		return;
@@ -231,7 +233,7 @@ static void wpas_p2p_set_own_freq_preference(struct wpa_supplicant *wpa_s,
 	/* Use the wpa_s used to control the P2P Device operation */
 	wpa_s = wpa_s->global->p2p_init_wpa_s;
 
-	if (wpa_s->conf->p2p_ignore_shared_freq &&
+	if (wpa_s->conf->p2p_ignore_shared_freq && !running_ap &&
 	    freq > 0 && wpa_s->num_multichan_concurrent > 1 &&
 	    wpas_p2p_num_unused_channels(wpa_s) > 0) {
 		wpa_printf(MSG_DEBUG, "P2P: Ignore own channel preference %d MHz due to p2p_ignore_shared_freq=1 configuration",
@@ -646,6 +648,7 @@ static u8 p2ps_group_capability(void *ctx, u8 incoming, u8 role,
 	struct wpa_ssid *persistent_go;
 	int p2p_no_group_iface;
 	unsigned int pref_freq_list[P2P_MAX_PREF_CHANNELS], size;
+	int running_ap;
 
 	wpa_printf(MSG_DEBUG, "P2P: Conncap - in:%d role:%d", incoming, role);
 
@@ -657,10 +660,10 @@ static u8 p2ps_group_capability(void *ctx, u8 incoming, u8 role,
 	size = P2P_MAX_PREF_CHANNELS;
 	if (force_freq && pref_freq &&
 	    !wpas_p2p_setup_freqs(wpa_s, 0, (int *) force_freq,
-				  (int *) pref_freq, 0, pref_freq_list, &size))
+				  (int *) pref_freq, 0, pref_freq_list, &size, &running_ap))
 		wpas_p2p_set_own_freq_preference(wpa_s,
 						 *force_freq ? *force_freq :
-						 *pref_freq);
+						 *pref_freq, running_ap);
 
 	/*
 	 * For non-concurrent capable devices:
@@ -3007,7 +3010,7 @@ static u8 wpas_invitation_process(void *ctx, const u8 *sa, const u8 *bssid,
 	}
 
 accept_inv:
-	wpas_p2p_set_own_freq_preference(wpa_s, 0);
+	wpas_p2p_set_own_freq_preference(wpa_s, 0, 0);
 
 	best_freq = 0;
 	freqs = os_calloc(wpa_s->num_multichan_concurrent,
@@ -3022,7 +3025,7 @@ accept_inv:
 	/* Get one of the frequencies currently in use */
 	if (best_freq > 0) {
 		wpa_printf(MSG_DEBUG, "P2P: Trying to prefer a channel already used by one of the interfaces");
-		wpas_p2p_set_own_freq_preference(wpa_s, best_freq);
+		wpas_p2p_set_own_freq_preference(wpa_s, best_freq, 0);
 
 		if (wpa_s->num_multichan_concurrent < 2 ||
 		    wpas_p2p_num_unused_channels(wpa_s) < 1) {
@@ -5311,7 +5314,8 @@ static int wpas_p2p_join_start(struct wpa_supplicant *wpa_s, int freq,
 static int wpas_p2p_setup_freqs(struct wpa_supplicant *wpa_s, int freq,
 				int *force_freq, int *pref_freq, int go,
 				unsigned int *pref_freq_list,
-				unsigned int *num_pref_freq)
+				unsigned int *num_pref_freq,
+				int *running_ap)
 {
 	struct wpa_used_freq_data *freqs;
 	int res, best_freq, num_unused;
@@ -5340,6 +5344,7 @@ static int wpas_p2p_setup_freqs(struct wpa_supplicant *wpa_s, int freq,
 		   freq, wpa_s->num_multichan_concurrent, num, num_unused);
 
 	/* find used frequencies by other hostapd processes */
+	*running_ap = 0;
 	if (!num) {
 		struct wpa_channel_info info;
 
@@ -5350,6 +5355,7 @@ static int wpas_p2p_setup_freqs(struct wpa_supplicant *wpa_s, int freq,
 			num = 1;
 			freqs[0].freq = info.frequency;
 			freqs[0].flags = WPA_FREQ_USED_BY_INFRA_STATION;
+			*running_ap = 1;
 		}
 	}
 
@@ -5513,6 +5519,7 @@ int wpas_p2p_connect(struct wpa_supplicant *wpa_s, const u8 *peer_addr,
 	const u8 *if_addr;
 	struct wpa_ssid *ssid = NULL;
 	unsigned int pref_freq_list[P2P_MAX_PREF_CHANNELS], size;
+	int running_ap;
 
 	if (wpa_s->global->p2p_disabled || wpa_s->global->p2p == NULL)
 		return -1;
@@ -5601,11 +5608,12 @@ int wpas_p2p_connect(struct wpa_supplicant *wpa_s, const u8 *peer_addr,
 
 	size = P2P_MAX_PREF_CHANNELS;
 	res = wpas_p2p_setup_freqs(wpa_s, freq, &force_freq, &pref_freq,
-				   go_intent == 15, pref_freq_list, &size);
+				   go_intent == 15, pref_freq_list, &size, &running_ap);
 	if (res)
 		return res;
 	wpas_p2p_set_own_freq_preference(wpa_s,
-					 force_freq ? force_freq : pref_freq);
+					 force_freq ? force_freq : pref_freq,
+					 running_ap);
 
 	p2p_set_own_pref_freq_list(wpa_s->global->p2p, pref_freq_list, size);
 
@@ -7097,6 +7105,7 @@ int wpas_p2p_invite(struct wpa_supplicant *wpa_s, const u8 *peer_addr,
 	int res;
 	int no_pref_freq_given = pref_freq == 0;
 	unsigned int pref_freq_list[P2P_MAX_PREF_CHANNELS], size;
+	int running_ap;
 
 	wpa_s->global->p2p_invite_group = NULL;
 	if (peer_addr)
@@ -7139,7 +7148,7 @@ int wpas_p2p_invite(struct wpa_supplicant *wpa_s, const u8 *peer_addr,
 	size = P2P_MAX_PREF_CHANNELS;
 	res = wpas_p2p_setup_freqs(wpa_s, freq, &force_freq, &pref_freq,
 				   role == P2P_INVITE_ROLE_GO,
-				   pref_freq_list, &size);
+				   pref_freq_list, &size, &running_ap);
 	if (res)
 		return res;
 
@@ -7179,6 +7188,7 @@ int wpas_p2p_invite_group(struct wpa_supplicant *wpa_s, const char *ifname,
 	struct wpa_ssid *ssid;
 	int persistent;
 	int freq = 0, force_freq = 0, pref_freq = 0;
+	int running_ap;
 	int res;
 	unsigned int pref_freq_list[P2P_MAX_PREF_CHANNELS], size;
 
@@ -7237,10 +7247,10 @@ int wpas_p2p_invite_group(struct wpa_supplicant *wpa_s, const char *ifname,
 	size = P2P_MAX_PREF_CHANNELS;
 	res = wpas_p2p_setup_freqs(wpa_s, freq, &force_freq, &pref_freq,
 				   role == P2P_INVITE_ROLE_ACTIVE_GO,
-				   pref_freq_list, &size);
+				   pref_freq_list, &size, &running_ap);
 	if (res)
 		return res;
-	wpas_p2p_set_own_freq_preference(wpa_s, force_freq);
+	wpas_p2p_set_own_freq_preference(wpa_s, force_freq, running_ap);
 
 	return p2p_invite(wpa_s->global->p2p, peer_addr, role, bssid,
 			  ssid->ssid, ssid->ssid_len, force_freq,
-- 
1.9.1

